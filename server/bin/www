#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);
const socketioJwt = require("socketio-jwt");

io.use(
  socketioJwt.authorize({
    secret: process.env.SESSION_SECRET,
    handshake: true,
    auth_header_required: true,
  })
);
io.on("connection", (socket) => {
  socket.on("go-online", (id) => {
    if (onlineUsers.has(id)) {
      onlineUsers.get(id).socketId.push(socket.id);
    } else {
      onlineUsers.set(id, { socketId: [socket.id] });
    }
    socket.currentUserId = id;
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);
  });

  socket.on("disconnect", () => {
    const { currentUserId } = socket;
    if (currentUserId && onlineUsers.has(currentUserId)) {
      const user = onlineUsers.get(currentUserId);
      user.socketId.forEach((id, i) => {
        if (id === socket.id) {
          user.socketId.splice(i, 1);
        }
      });
      if (user.convOtherUser) {
        onlineUsers.get(user.convOtherUser).socketId.forEach((id) => {
          io.to(id).emit("disconnect-user", {
            convId: user.connectedConv,
            user: user.name,
          });
        });
      }
    }
  });

  socket.on("new-message", (data) => {
    if (onlineUsers.has(data.recipientId))
      onlineUsers.get(data.recipientId).socketId.forEach((id) => {
        io.to(id).emit("new-message", {
          message: data.message,
          sender: data.sender,
        });
      });
  });

  socket.on("connected-user", (data) => {
    const { currentUserId } = socket;
    if (currentUserId && onlineUsers.has(currentUserId)) {
      const user = onlineUsers.get(currentUserId);
      user.connectedConv = data.convId;
      user.convOtherUser = data.recipientId;
      user.name = data.user;
    }
    if (onlineUsers.has(data.recipientId)) {
      onlineUsers.get(data.recipientId).socketId.forEach((id) => {
        io.to(id).emit("connected-user", {
          convId: data.convId,
          user: data.user,
        });
      });
    }
  });

  socket.on("logout", (id) => {
    if (onlineUsers.has(id)) {
      onlineUsers.delete(id);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
